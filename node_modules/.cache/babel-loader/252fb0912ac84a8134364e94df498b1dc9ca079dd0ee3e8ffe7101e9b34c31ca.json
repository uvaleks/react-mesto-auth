{"ast":null,"code":"class Api {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка ${res.status}`);\n  }\n  getCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  postCard({\n    name,\n    link\n  }) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._headers.authorization,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(this._checkResponse);\n  }\n  patchAvatar(link) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._headers.authorization,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: link\n      })\n    }).then(this._checkResponse);\n  }\n  changeLikeCardStatus(id, isLiked) {\n    if (isLiked) {\n      return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n        method: 'PUT',\n        headers: {\n          authorization: this._headers.authorization,\n          'Content-Type': 'application/json'\n        }\n      }).then(this._checkResponse);\n    } else {\n      return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n        method: 'DELETE',\n        headers: {\n          authorization: this._headers.authorization,\n          'Content-Type': 'application/json'\n        }\n      }).then(this._checkResponse);\n    }\n  }\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._headers.authorization,\n        'Content-Type': 'application/json'\n      }\n    }).then(this._checkResponse);\n  }\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  patchUserInfo({\n    name,\n    about\n  }) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._headers.authorization,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(this._checkResponse).then(result => {\n      return result;\n    });\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-68',\n  headers: {\n    authorization: 'b14febf0-0b28-4e38-a9e1-9974acb9fa00'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","baseUrl","headers","_baseUrl","_headers","_checkResponse","res","ok","json","Promise","reject","status","getCards","fetch","then","postCard","name","link","method","authorization","body","JSON","stringify","patchAvatar","avatar","changeLikeCardStatus","id","isLiked","deleteCard","getUserInfo","patchUserInfo","about","result","api"],"sources":["/Users/uvaleks/Documents/coding/web_dev_study/mesto-react/src/utils/api.js"],"sourcesContent":["class Api {\n    constructor({baseUrl, headers}) {\n        this._baseUrl = baseUrl;\n        this._headers = headers;\n    }\n  \n    _checkResponse(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка ${res.status}`);\n    }\n\n    getCards() {\n        return fetch(`${this._baseUrl}/cards`, {headers: this._headers})\n        .then(this._checkResponse)\n    }\n\n    postCard({name, link}) {\n        return fetch(`${this._baseUrl}/cards`, {\n            method: 'POST',\n            headers: {\n                authorization: this._headers.authorization,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: name,\n                link: link\n            })\n        })\n        .then(this._checkResponse)\n    }\n\n    patchAvatar(link) {\n        return fetch(`${this._baseUrl}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._headers.authorization,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: link\n            })\n        })\n        .then(this._checkResponse)\n    }\n\n    changeLikeCardStatus(id, isLiked) {\n        if (isLiked) {\n            return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n                method: 'PUT',\n                headers: {\n                    authorization: this._headers.authorization,\n                    'Content-Type': 'application/json'\n                }\n            })\n            .then(this._checkResponse)\n        } else {\n            return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n                method: 'DELETE',\n                headers: {\n                    authorization: this._headers.authorization,\n                    'Content-Type': 'application/json'\n                }\n            })\n            .then(this._checkResponse)\n        }\n    }\n\n    deleteCard(id) {\n        return fetch(`${this._baseUrl}/cards/${id}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._headers.authorization,\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(this._checkResponse)\n    }\n\n    getUserInfo() {\n        return fetch(`${this._baseUrl}/users/me`, {headers: this._headers})\n        .then(this._checkResponse)\n\n    }\n\n    patchUserInfo({name, about}) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._headers.authorization,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: name,\n                about: about\n            })\n        })\n        .then(this._checkResponse)\n        .then((result) => {\n            return result;\n        })\n    }\n}\n\nconst api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-68',\n    headers: {\n      authorization: 'b14febf0-0b28-4e38-a9e1-9974acb9fa00'\n    }\n  });\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}